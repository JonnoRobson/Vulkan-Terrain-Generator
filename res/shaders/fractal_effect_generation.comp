#version 450
#extension GL_ARB_separate_shader_objects : enable

// inputs
#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

// output image
layout(binding = 0, rgba32f) uniform image2D generatedImage;

// uniform buffers
layout(binding = 1) uniform TerrainGenData
{
	vec2 position_offset;
	float octaves;
	float amplitude;
	float frequency;
	float seed;
	float filterWidth;
	float padding;
} terrain_data;

// perlin noise permutation data
int permutation[512] = {
	151,160,137,91,90,15, 131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,
	8,99,37,240,21,10,23, 190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,
	117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168, 68,175,74,
	165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,
	105,92,41,55,46,245,40,244,102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,
	187,208, 89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,
	3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,
	227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152, 2,44,154,163,70,
	221,153,101,155,167, 43,172,9,129,22,39,253, 19,98,108,110,79,113,224,232,178,
	185, 112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,
	81,51,145,235,249,14,239,107,49,192,214, 31,181,199,106,157,184, 84,204,
	176,115,121,50,45,127, 4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,
	128,195,78,66,215,61,156,180,151,160,137,91,90,15, 131,13,201,95,96,53,194,
	233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23, 190, 6,148,247,120,234,
	75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,
	125,136,171,168, 68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,
	122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54, 65,25,63,161,
	1,216,80,73,209,76,132,187,208, 89,18,169,200,196,135,130,116,188,159,86,
	164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,
	82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,
	2,44,154,163,70,221,153,101,155,167, 43,172,9,129,22,39,253, 19,98,108,110,79,
	113,224,232,178,185, 112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,
	179,162,241,81,51,145,235,249,14,239,107,49,192,214, 31,181,199,106,157,184,
	84,204,176,115,121,50,45,127, 4,150,254,138,236,205,93,222,114,67,29,24,72,243,
	141,128,195,78,66,215,61,156,180
};

double random(vec2 uv)
{
	return fract(sin(dot(uv, vec2(12.9898,78.233))) * 43758.5453123);
}

double fade(double fadeValue)
{
	return fadeValue * fadeValue * fadeValue * (fadeValue * (fadeValue * 6 - 15) + 10);
}

double grad(int hash, double x, double y, double z)
{
	int h = hash & 15;
	double u = h < 8 ? x : y;
	double v = h < 4 ? y : h == 12 || h == 14 ? x : z;
	return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}

double improved_perlin_noise(double x, double y, double z)
{
	int X = int(floor(x)) & 255;
	int Y = int(floor(y)) & 255;
	int Z = int(floor(z)) & 255;

	x -= floor(x);
	y -= floor(y);
	z -= floor(z);

	double u = fade(x);
	double v = fade(y);
	double w = fade(z);

	int A	= permutation[X] + Y;
	int AA	= permutation[A] + Z;
	int AB	= permutation[A + 1] + Z;
	int B	= permutation[X + 1] + Y;
	int BA	= permutation[B] + Z;
	int BB	= permutation[B + 1] + Z;

	double x1, x2, y1, y2;

	x1 = mix(grad(permutation[AA], x, y, z), grad(permutation[BA], x-1, y, z), u);
	x2 = mix(grad(permutation[AB], x, y-1, z), grad(permutation[BB], x-1, y-1, z), u);
	y1 = mix(x1, x2, v);

	x1 = mix(grad(permutation[AA+1], x, y, z-1), grad(permutation[BA+1], x-1, y, z-1), u);
	x2 = mix(grad(permutation[AB+1], x, y-1, z-1), grad(permutation[BB+1], x-1, y-1, z-1), u);
	y2 = mix(x1, x2, v);

	return mix(y1, y2, w);
}

void main()
{
	vec2 imageCoords = gl_GlobalInvocationID.xy / 1024.0f;
	vec2 offsetCoords = terrain_data.position_offset / 1024.0f;

	float value = 0.0f;
	float amplitude = terrain_data.amplitude;
	vec2 noiseCoords = (imageCoords + offsetCoords) * terrain_data.frequency;

	mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.5));
	float shift = 100.0f;

	// apply shifted fractional brownian motion
	for(int i = 0; i < int(terrain_data.octaves); i++)
	{
		float noise = abs(float(improved_perlin_noise(noiseCoords.x, noiseCoords.y, terrain_data.seed)));
		noise = 1.0f - noise;
		noise *= noise;
		value += amplitude * noise;
		noiseCoords = rot * noiseCoords * 2.0f + shift;
		amplitude *= 0.5f;
	}

	//value = value < 0.8 ? mix(0, 1, (1.0 - value) / 0.2) : 1;
	value = value < 0.6 ? 0 : 1;
	
	// average self with surrounding pixels to determine weight
	int filterWidth = int(terrain_data.filterWidth);
	int kernelSize = (filterWidth + 1) + filterWidth;
	kernelSize *= kernelSize;
	float total = value;
	for(int x = -filterWidth; x <= filterWidth; x++)
	{
		for(int y = -filterWidth; y <= filterWidth; y++)
		{
			vec2 coords = gl_GlobalInvocationID.xy + vec2(x, y);

			total += imageLoad(generatedImage, ivec2(coords)).a;
		}
	}
	total /= kernelSize;
	value *= total;
	
	float time = terrain_data.seed * 0.5;
	vec3 color;
	//color.z = sin(time * (3.14f / 2.0f)) * 0.5 + 0.5;
	//color.x = 1.0f - color.z;
	//color.y = cos(time * (3.14f / 2.0f)) * 0.5 + 0.5;
	color.x = 1.0f - total;
	color.y = 0.0f;
	color.z = total * 0.5;
	color *= (1.0 - value);

	imageStore(generatedImage, ivec2(gl_GlobalInvocationID.xy), vec4(color, value));
}